
<div id="workoutLifts"> 
  <h2 class="welcome-user"> <%=current_user.name %>'s workout </h2> 
  <h1 id="workout-start-time">Start Time: <%= @workout.start_time.strftime("%A, %d %b %Y %l:%M %p") %> </h1>
  <% if @workout.end_time %>
    <h1 id="workout-end-time">End Time: <%= @workout.end_time.strftime("%A, %d %b %Y %l:%M %p") %> </h1>
  <% end %>
   <ul>
  </ul>
  <div id="add-workoutlift-button">
    <div id="workoutlift-modal" class="modal">  
      <div class="modal-content"> 
      <span onclick="byeModal('workoutlift-modal')" class="close">&times;</span> 
      <%= form_for( WorkoutLift.new ) do |f| %> 
        <%= f.hidden_field :workout_lift_id, value: ""  %> 
        <%= f.label :name %>
        <%= f.collection_select :lift_id, Lift.all.reject{|l| @workout.lifts.include?(l)}, :id, :name %> 
        <%= f.hidden_field :workout_id, value: @workout.id %>
        <%= f.submit "Add Lift", class: "btn btn-success btn-sm"  %> 
      <%end%> 
    </div> 
  </div> 
</div> <!-- #workoutLifts -->

<%= link_to "See all workouts", workouts_path(@workout)%>

  <%= form_for :workout, url: { controller: "workouts", action: "update", id: "#{@workout.id}" }, method: :put  do |f| %>
    <%= button_tag type: 'submit', class: "button finish-workout", id: "finish-button" do %>
    End workout
    <% end %>
   
  <% end %>

<div id="new-exerciseset-modal" class="modal">  
  <div class="modal-content">
    <span onclick="byeModal('new-exerciseset-modal')" class="close">&times;</span>
    <%= form_for(ExerciseSet.new, html: {:class => "new-exerciseset-form", :id => "new-exercise-set"}) do |f| %> 
      <%= f.hidden_field :workout_lift_id, value: ""  %> 
      <%= f.label :weight %> 
      <%= f.number_field :weight, :required => true %>
      <%= f.label :reps %> 
      <%= f.number_field :reps, :required => true %> 
      <%= f.submit "Add Set", data: {disable_with: false}, class: "btn btn-success btn-sm" %> 
    <%end%> 
  </div>
</div>

<div id="edit-exerciseset-modal" class="modal">  
  <div class="modal-content">
    <span onclick="byeModal('edit-exercise-set')" class="close-edit">&times;</span>
    <%= form_for(ExerciseSet.new, html: {:class => "edit-exercise-set-form", :id => "edit-exercise-set"}) do |f| %> 
      <%= f.hidden_field :workout_lift_id, value: ""  %> 
      <%= f.label :weight %> 
      <%= f.number_field :weight, :required => true %> 
      <%= f.label :reps %> 
      <%= f.number_field :reps, :required => true %> 
      <%= f.submit "Add Set", data: {disable_with: false}, class: "btn btn-success btn-sm" %> 
    <%end%> 
  </div>
</div>

<script type="text/javascript" charset="utf-8"> 

  function addWorkoutLift(id) {
   
    document.querySelector("#workoutlift-modal").style.display = "block"; 

  }
 
  function showEditForm(exerciseSetId, workout_lift_id, set_number) {

    document.querySelector("form #exercise_set_workout_lift_id").value = workout_lift_id
    document.querySelector("#edit-exerciseset-modal").style.display = "block";
    var modal = document.getElementById("edit-exerciseset-modal");
    var span = document.getElementsByClassName("close-edit")[0]
     
    span.onclick = function() {
      modal.style.display = "none"
    }
    
     document.getElementById("edit-exercise-set").addEventListener('submit', e => {
      e.preventDefault()
      var workout_lift_id = document.querySelector("form #exercise_set_workout_lift_id").value 
      var token = e.target.querySelector('input[name=authenticity_token]').value 
      var data = {exercise_set: {}}; 
      var exercise_set_url = `/workout_lifts/${workout_lift_id}/exercise_sets/${exerciseSetId}`
      
      data["exercise_set"]["weight"] = e.target.querySelector("#exercise_set_weight").value 
      data["exercise_set"]["reps"] = e.target.querySelector("#exercise_set_reps").value 
      
      fetch(`${exercise_set_url}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json', 
          'Accept' : 'application/json',
          'X-CSRF-token': token
        }, 
        body: JSON.stringify(data)
      })
      .then(resp=> resp.json())
      .then(workout_lift => {
        displayEditedExerciseSets(workout_lift, exerciseSetId, set_number)
      })
      .catch(e => {
        console.log(e);
        return e;
      });
    })
  } 

  function displayEditedExerciseSets(workoutlift, exerciseSetId, set_number) {
    
    if (workoutlift.exercise_sets[0]){

      var js_exercise_sets = workoutlift.exercise_sets.map(exercise_set => new ExerciseSet(exercise_set, set_number))
      var last_exercise_set = js_exercise_sets[js_exercise_sets.length - 1]

      document.getElementById("dl-" + last_exercise_set.workout_lift_id).querySelector("#set-" + last_exercise_set.i).innerHTML += last_exercise_set.set_weight_reps()
      document.getElementsByName("commit")[0].disabled = false 
      byeModal()

    }
  
  }
  function byeModal(thisModal){
    
       
    if (thisModal === 'exerciseset-modal') {
      var modal = document.getElementById("exerciseset-modal");
    } else if( thisModal === 'edit-exerciseset') {
      var modal = document.getElementById("edit-exercise-set");
    } else if ( thisModal === 'workoutlift-modal' ) {
      var modal = document.getElementById("workoutlift-modal");
    } else {
      var modal = document.getElementById("new-exerciseset-modal")
    }
    modal.style.display = "none"
    
  }

  function addSet(id) {

    document.querySelector("form #exercise_set_workout_lift_id").value = id 
    document.querySelector("#new-exerciseset-modal").style.display = "block"; 

    
  }
</script>